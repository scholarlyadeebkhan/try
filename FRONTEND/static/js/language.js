// Language switching functionality for AarogyaLink - Enhanced Version
let currentLanguage = 'en';
let isLanguageDropdownOpen = false;

// Multilingual content
const translations = {
    en: {
        greeting: "Hi! I'm Dr. AarogyaLink, your AI health buddy. Tell me what's bothering you and I'll ask a few quick questions to help out. ЁЯШК\n\nRemember: For serious concerns, always see a real doctor!",
        name: "English",
        placeholder: "Tell me what's bothering you... e.g. 'Bad headache since this morning, right side, feels throbbing, also nauseous'",
        buttons: {
            send: "Send",
            record: "Start Recording",
            analyze: "Analyze Image",
            startAI: "Start AI Analysis"
        },
        // New translations for body elements
        heroTitle: "Your Personal Health Companion",
        heroSubtitle: "Connect with care, whenever you need it. Securely share your health concerns and receive expert guidance, all in one place.",
        heroCTA: "Try Now",
        howItWorksTitle: "Connect with Care, Your Way.",
        howItWorksSubtitle: "Our platform makes it simple to share your health concerns using any format you're comfortable with.",
        tryNowTitle: "Try AarogyaLink Now",
        tryNowSubtitle: "Share your health concerns in the way that works best for you",
        textTab: "Type Your Problem Here",
        uploadImage: "Upload Image",
        startWebcam: "Start Webcam",
        stopWebcam: "Stop Webcam",
        whyUsTitle: "Health is a Partnership. We're Here to Help.",
        contactTitle: "Get In Touch",
        contactSubtitle: "For all non-medical inquiries, please fill out the form below.",
        footerText: "┬й 2024 AarogyaLink. All rights reserved.",
        privacyPolicy: "Privacy Policy",
        termsOfService: "Terms of Service",
        getStarted: "Get Started"
    },
    hi: {
        greeting: "рдирдорд╕реНрддреЗ! рдореИрдВ рдбреЙ. рдЖрд░реЛрдЧреНрдпрд▓рд┐рдВрдХ рд╣реВрдВ, рдЖрдкрдХрд╛ AI рд╕реНрд╡рд╛рд╕реНрдереНрдп рдорд┐рддреНрд░ред рдмрддрд╛рдЗрдП рдХреНрдпрд╛ рдкрд░реЗрд╢рд╛рдиреА рд╣реИ, рдореИрдВ рдХреБрдЫ рд╕рд╡рд╛рд▓ рдкреВрдЫрдХрд░ рдорджрдж рдХрд░реВрдВрдЧрд╛ред ЁЯШК\n\nрдпрд╛рдж рд░рдЦреЗрдВ: рдЧрдВрднреАрд░ рд╕рдорд╕реНрдпрд╛рдУрдВ рдХреЗ рд▓рд┐рдП рд╣рдореЗрд╢рд╛ рдЕрд╕рд▓реА рдбреЙрдХреНрдЯрд░ рд╕реЗ рдорд┐рд▓реЗрдВ!",
        name: "рд╣рд┐рдВрджреА",
        placeholder: "рдЕрдкрдиреА рдкрд░реЗрд╢рд╛рдиреА рдмрддрд╛рдПрдВ... рдЬреИрд╕реЗ: 'рд╕реБрдмрд╣ рд╕реЗ рддреЗрдЬ рд╕рд┐рд░рджрд░реНрдж, рджрд╛рдИрдВ рддрд░рдл, рдзрдбрд╝рдХрддрд╛ рд╣реИ, рдЬреА рдорд┐рдЪрд▓рд╛ рд░рд╣рд╛ рд╣реИ'",
        buttons: {
            send: "рднреЗрдЬреЗрдВ",
            record: "рд░рд┐рдХреЙрд░реНрдбрд┐рдВрдЧ рд╢реБрд░реВ рдХрд░реЗрдВ",
            analyze: "рдЫрд╡рд┐ рдХрд╛ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд░реЗрдВ",
            startAI: "AI рд╡рд┐рд╢реНрд▓реЗрд╖рдг рд╢реБрд░реВ рдХрд░реЗрдВ"
        },
        // New translations for body elements
        heroTitle: "рдЖрдкрдХрд╛ рд╡реНрдпрдХреНрддрд┐рдЧрдд рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕рд╛рдереА",
        heroSubtitle: "рдЬрдм рднреА рдЖрдкрдХреЛ рдЖрд╡рд╢реНрдпрдХрддрд╛ рд╣реЛ, рджреЗрдЦрднрд╛рд▓ рдХреЗ рд╕рд╛рде рдХрдиреЗрдХреНрдЯ рдХрд░реЗрдВред рд╕реБрд░рдХреНрд╖рд┐рдд рд░реВрдк рд╕реЗ рдЕрдкрдиреА рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕рдорд╕реНрдпрд╛рдПрдВ рд╕рд╛рдЭрд╛ рдХрд░реЗрдВ рдФрд░ рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ рдорд╛рд░реНрдЧрджрд░реНрд╢рди рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ, рд╕рднреА рдПрдХ рд╣реА рд╕реНрдерд╛рди рдкрд░ред",
        heroCTA: "рдЕрдм рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВ",
        howItWorksTitle: "рдЕрдкрдиреЗ рддрд░реАрдХреЗ рд╕реЗ рджреЗрдЦрднрд╛рд▓ рдХреЗ рд╕рд╛рде рдХрдиреЗрдХреНрдЯ рдХрд░реЗрдВред",
        howItWorksSubtitle: "рд╣рдорд╛рд░рд╛ рдкреНрд▓реЗрдЯрдлреЙрд░реНрдо рдЖрдкрдХреА рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕рдорд╕реНрдпрд╛рдУрдВ рдХреЛ рд╕рд╛рдЭрд╛ рдХрд░рдирд╛ рдЖрд╕рд╛рди рдмрдирд╛рддрд╛ рд╣реИ, рдХрд┐рд╕реА рднреА рдкреНрд░рд╛рд░реВрдк рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдХреЗ рдЬреЛ рдЖрдкрдХреЗ рд▓рд┐рдП рдЖрд░рд╛рдорджрд╛рдпрдХ рд╣реИред",
        tryNowTitle: "рдЕрдм рдЖрд░реЛрдЧреНрдпрд▓рд┐рдВрдХ рдХрд╛ рдкреНрд░рдпреЛрдЧ рдХрд░реЗрдВ",
        tryNowSubtitle: "рдЕрдкрдиреА рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕рдорд╕реНрдпрд╛рдУрдВ рдХреЛ рдЙрд╕ рддрд░реАрдХреЗ рд╕реЗ рд╕рд╛рдЭрд╛ рдХрд░реЗрдВ рдЬреЛ рдЖрдкрдХреЗ рд▓рд┐рдП рд╕рдмрд╕реЗ рдЕрдЪреНрдЫрд╛ рдХрд╛рдо рдХрд░рддрд╛ рд╣реИ",
        textTab: "рдпрд╣рд╛рдВ рдЕрдкрдиреА рд╕рдорд╕реНрдпрд╛ рдЯрд╛рдЗрдк рдХрд░реЗрдВ",
        uploadImage: "рдЫрд╡рд┐ рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ",
        startWebcam: "рд╡реЗрдмрдХреИрдо рдкреНрд░рд╛рд░рдВрдн рдХрд░реЗрдВ",
        stopWebcam: "рд╡реЗрдмрдХреИрдо рдмрдВрдж рдХрд░реЗрдВ",
        whyUsTitle: "рд╕реНрд╡рд╛рд╕реНрдереНрдп рдПрдХ рд╕рд╛рдЭреЗрджрд╛рд░реА рд╣реИред рд╣рдо рдпрд╣рд╛рдВ рдорджрдж рдХреЗ рд▓рд┐рдП рд╣реИрдВред",
        contactTitle: "рд╕рдВрдкрд░реНрдХ рдореЗрдВ рд░рд╣реЗрдВ",
        contactSubtitle: "рд╕рднреА рдЧреИрд░-рдЪрд┐рдХрд┐рддреНрд╕рд╛ рдкреВрдЫрддрд╛рдЫ рдХреЗ рд▓рд┐рдП, рдХреГрдкрдпрд╛ рдиреАрдЪреЗ рджрд┐рдП рдЧрдП рдлреЙрд░реНрдо рдХреЛ рднрд░реЗрдВред",
        footerText: "┬й 2024 рдЖрд░реЛрдЧреНрдпрд▓рд┐рдВрдХред рд╕рд░реНрд╡рд╛рдзрд┐рдХрд╛рд░ рд╕реБрд░рдХреНрд╖рд┐рддред",
        privacyPolicy: "рдЧреЛрдкрдиреАрдпрддрд╛ рдиреАрддрд┐",
        termsOfService: "рд╕реЗрд╡рд╛ рдХреА рд╢рд░реНрддреЗрдВ",
        getStarted: "рдЖрд░рдВрдн рдХрд░реЗрдВ"
    },
    pa: {
        greeting: "ри╕рид ри╕рйНри░рйА риЕриХри╛ри▓! риорйИриВ рибри╛. риЖри░рйЛриЧри┐риЖри▓ри┐рй░риХ ри╣ри╛риВ, ридрйБри╣ри╛рибри╛ AI ри╕ри┐ри╣рид рижрйЛри╕ридред рижрй▒ри╕рйЛ риХрйА рикри░рйЗри╕ри╝ри╛риирйА ри╣рйИ, риорйИриВ риХрйБриЭ ри╕ри╡ри╛ри▓ рикрйБрй▒риЫ риХрйЗ риорижриж риХри░ри╛риВриЧри╛ред ЁЯШК\n\nрипри╛риж ри░рй▒риЦрйЛ: риЧрй░ринрйАри░ ри╕риорй▒ри╕ри┐риЖри╡ри╛риВ ри▓риИ ри╣риорйЗри╕ри╝ри╛ риЕри╕ри▓рйА рибри╛риХриЯри░ риирйВрй░ риори┐ри▓рйЛ!",
        name: "рикрй░риЬри╛римрйА",
        placeholder: "риЕрикригрйА рикри░рйЗри╕ри╝ри╛риирйА рижрй▒ри╕рйЛ... риЬри┐ри╡рйЗриВ: 'ри╕ри╡рйЗри░рйЗ ридрйЛриВ ри╕ри┐ри░ ри╡ри┐рй▒риЪ римри╣рйБрид рижри░риж, ри╕рй▒риЬрйЗ рикри╛ри╕рйЗ, ризрйЬриХрижри╛ ри╣рйИ, риЬрйА риори┐риЪри▓ри╛ ри░ри┐ри╣ри╛'",
        buttons: {
            send: "ринрйЗриЬрйЛ",
            record: "ри░ри┐риХри╛ри░рибри┐рй░риЧ ри╕ри╝рйБри░рйВ риХри░рйЛ",
            analyze: "ридри╕ри╡рйАри░ рижри╛ ри╡ри┐ри╕ри╝ри▓рйЗри╕ри╝риг риХри░рйЛ",
            startAI: "AI ри╡ри┐ри╕ри╝ри▓рйЗри╕ри╝риг ри╕ри╝рйБри░рйВ риХри░рйЛ"
        },
        // New translations for body elements
        heroTitle: "ридрйБри╣ри╛рибри╛ риири┐рй▒риЬрйА ри╕ри┐ри╣рид ри╕ри╛риерйА",
        heroSubtitle: "риЬрижрйЛриВ ри╡рйА ридрйБри╣ри╛риирйВрй░ ри▓рйЛрйЬ ри╣рйЛри╡рйЗ ридри╛риВ ри╕ри╛ри╡ризри╛риирйА риири╛ри▓ риХриирйИриХриЯ риХри░рйЛред риЖрикригрйАриЖриВ ри╕ри┐ри╣рид ри╕риорй▒ри╕ри┐риЖри╡ри╛риВ риирйВрй░ ри╕рйБри░рй▒риЦри┐риЕрид риврй░риЧ риири╛ри▓ ри╕ри╛риВриЭри╛ риХри░рйЛ риЕридрйЗ риори╛ри╣ри░ риори╛ри░риЧрижри░ри╕ри╝рии рикрйНри░ри╛рикрид риХри░рйЛ, ри╕рин риЗрй▒риХрйЛ риери╛риВ 'ридрйЗред",
        heroCTA: "ри╣рйБригрйЗ риХрйЛри╕ри╝ри┐ри╕ри╝ риХри░рйЛ",
        howItWorksTitle: "риЖрикригрйЗ риврй░риЧ риири╛ри▓ ри╕ри╛ри╡ризри╛риирйА риири╛ри▓ риХриирйИриХриЯ риХри░рйЛред",
        howItWorksSubtitle: "ри╕ри╛рибри╛ рикри▓рйЗриЯрилри╛ри░рио ридрйБри╣ри╛рибрйАриЖриВ ри╕ри┐ри╣рид ри╕риорй▒ри╕ри┐риЖри╡ри╛риВ риирйВрй░ ри╕ри╛риВриЭри╛ риХри░риири╛ ри╕рйМриЦри╛ римригри╛риЙриВрижри╛ ри╣рйИ, риХри┐ри╕рйЗ ри╡рйА рилри╛ри░риорйИриЯ рижрйА ри╡ри░ридрйЛриВ риХри░риХрйЗ риЬрйЛ ридрйБри╣ри╛риирйВрй░ риЖри░ри╛риорижри╛риЗриХ ри▓рй▒риЧрижри╛ ри╣рйИред",
        tryNowTitle: "ри╣рйБриг AarogyaLink рижрйА риХрйЛри╕ри╝ри┐ри╕ри╝ риХри░рйЛ",
        tryNowSubtitle: "риЖрикригрйАриЖриВ ри╕ри┐ри╣рид ри╕риорй▒ри╕ри┐риЖри╡ри╛риВ риирйВрй░ риЙри╕ риврй░риЧ риири╛ри▓ ри╕ри╛риВриЭри╛ риХри░рйЛ риЬрйЛ ридрйБри╣ри╛риирйВрй░ ри╕рин ридрйЛриВ ри╡ризрйАриЖ ри▓рй▒риЧрижри╛ ри╣рйИ",
        textTab: "риЗрй▒риерйЗ риЖрикригрйА ри╕риорй▒ри╕ри┐риЖ риЯри╛риИрик риХри░рйЛ",
        uploadImage: "риЪри┐рй▒ридри░ риЕрикри▓рйЛриб риХри░рйЛ",
        startWebcam: "ри╡рйИрй▒римриХрйИрио ри╕ри╝рйБри░рйВ риХри░рйЛ",
        stopWebcam: "ри╡рйИрй▒римриХрйИрио римрй░риж риХри░рйЛ",
        whyUsTitle: "ри╕ри┐ри╣рид риЗрй▒риХ ринри╛риИри╡ри╛ри▓ри╛ ри╣рйИред риЕри╕рйАриВ риорижриж ри▓риИ риЗрй▒риерйЗ ри╣ри╛риВред",
        contactTitle: "ри╕рй░рикри░риХ ри╡ри┐рй▒риЪ ри░ри╣рйЛ",
        contactSubtitle: "ри╕ри╛ри░рйАриЖриВ риЧрйИри░-риорйИрибрйАриХри▓ рикрйБрй▒риЫриЧри┐рй▒риЫри╛риВ ри▓риИ, риХри┐ри░рикри╛ риХри░риХрйЗ ри╣рйЗриари╛риВ рижри┐рй▒ридри╛ рилри╛ри░рио ринри░рйЛред",
        footerText: "┬й 2024 риЖри░рйЛриЧри┐риЖри▓ри┐рй░риХред ри╕ри╛ри░рйЗ ри╣рй▒риХ ри░ри╛риЦри╡рйЗриВ ри╣рииред",
        privacyPolicy: "рикри░ри╛риИри╡рйЗри╕рйА риирйАридрйА",
        termsOfService: "ри╕рйЗри╡ри╛ рижрйАриЖриВ ри╕ри╝ри░ридри╛риВ",
        getStarted: "ри╕ри╝рйБри░рйВ риХри░рйЛ"
    },
    or: {
        greeting: "рмирморм╕рнНрмХрм╛рм░! рморнБрмБ рмбрмГ рмЕрм░рнЛрмЧрнНрнЯрм▓рм┐рмЩрнНрмХ, рмЖрмкрмгрмЩрнНрмХрм░ AI рм╕рнНрн▒рм╛рм╕рнНрмернНрнЯ рм╕рм╛рмЩрнНрмЧред рморнЛрмдрнЗ рмХрнБрм╣рмирнНрмдрнБ рмХтАЩрмг рмЖрмкрмгрмЩрнНрмХрнБ рммрнНрнЯрм╛рм╣рм╛рмд рмХрм░рнБрмЫрм┐ рмПрммрмВ рморнБрмБ рмХрм┐рмЫрм┐ рмдрнБрм░рмирнНрмд рмкрнНрм░рм╢рнНрми рмкрмЪрм╛рм░рм┐ рм╕рм╛рм╣рм╛рмпрнНрнЯ рмХрм░рм┐рммрм┐ред ЁЯШК\n\nрмормирнЗрм░рмЦрмирнНрмдрнБ: рмЧрнБрм░рнБрмдрм░ рмЪрм┐рмирнНрмдрм╛, рм╕рм░рнНрммрмжрм╛ рмПрмХ рммрм╛рм╕рнНрмдрмм рмбрм╛рмХрнНрмдрм░рмЩрнНрмХрнБ рмжрнЗрмЦрмирнНрмдрнБ!",
        name: "рмУрмбрм╝рм┐рмЖ",
        placeholder: "рморнЛрмдрнЗ рмХрнБрм╣рмирнНрмдрнБ рмХтАЩрмг рмЖрмкрмгрмЩрнНрмХрнБ рммрнНрнЯрм╛рм╣рм╛рмд рмХрм░рнБрмЫрм┐... рмЙрмжрм╛рм╣рм░рмг: 'рмХрм╛рм▓рм┐рмарм╛рм░рнБ рмХрмбрм╝рм╛ рморнБрмЦрм░ рммрнНрнЯрм╛рмерм╛, рмбрм╛рм╣рм╛рмг рмкрм╛рм░рнНрм╢рнНрн▒, рмзрмХрмзрмХрм┐ рмЕрмирнБрмнрмм рм╣рнБрмП, рмормзрнНрнЯ рммрм╛рмирнНрмдрм┐ рм▓рм╛рмЧрнБрмЫрм┐'",
        buttons: {
            send: "рмкрмарм╛рмирнНрмдрнБ",
            record: "рм░рнЗрмХрм░рнНрмбрм┐рмВ рмЖрм░рморнНрмн рмХрм░рмирнНрмдрнБ",
            analyze: "рмЫрммрм┐рм░ рммрм┐рм╢рнНрм│рнЗрм╖рмг рмХрм░рмирнНрмдрнБ",
            startAI: "AI рммрм┐рм╢рнНрм│рнЗрм╖рмг рмЖрм░рморнНрмн рмХрм░рмирнНрмдрнБ"
        },
        // New translations for body elements
        heroTitle: "рмЖрмкрмгрмЩрнНрмХрм░ рммрнНрнЯрмХрнНрмдрм┐рмЧрмд рм╕рнНрн▒рм╛рм╕рнНрмернНрнЯ рм╕рм╛рмЩрнНрмЧ",
        heroSubtitle: "рмпрнЗрмдрнЗрммрнЗрм▓рнЗ рмЖрмкрмгрмЩрнНрмХрнБ рмЖрммрм╢рнНрнЯрмХрмдрм╛ рм╣рнБрмП, рм╕рм╛рммрмзрм╛рмирмдрм╛ рм╕рм╣рм┐рмд рм╕рмВрмпрнЛрмЧ рмХрм░рмирнНрмдрнБред рмирм┐рм░рм╛рмкрмжрм░рнЗ рмЖрмкрмгрмЩрнНрмХрм░ рм╕рнНрн▒рм╛рм╕рнНрмернНрнЯ рмЪрм┐рмирнНрмдрм╛рмЧрнБрмбрм┐рмХ рм╕рнЗрнЯрм╛рм░рнН рмХрм░рмирнНрмдрнБ рмПрммрмВ рммрм┐рм╢рнЗрм╖рмЬрнНрмЮ рморм╛рм░рнНрмЧрмжрм░рнНрм╢рми рмкрм╛рмЖрмирнНрмдрнБ, рм╕рммрнБ рмЧрнЛрмЯрм┐рмП рм╕рнНрмерм╛рмирм░рнЗред",
        heroCTA: "рммрм░рнНрмдрнНрмдрморм╛рми рмЪрнЗрм╖рнНрмЯрм╛ рмХрм░рмирнНрмдрнБ",
        howItWorksTitle: "рмЖрмкрмгрмЩрнНрмХ рмкрмжрнНрмзрмдрм┐рм░рнЗ рм╕рм╛рммрмзрм╛рмирмдрм╛ рм╕рм╣рм┐рмд рм╕рмВрмпрнЛрмЧ рмХрм░рмирнНрмдрнБред",
        howItWorksSubtitle: "рмЖрмо рмкрнНрм▓рм╛рмЯрмлрм░рнНрмо рмЖрмкрмгрмЩрнНрмХрм░ рм╕рнНрн▒рм╛рм╕рнНрмернНрнЯ рмЪрм┐рмирнНрмдрм╛рмЧрнБрмбрм┐рмХрнБ рм╕рнЗрнЯрм╛рм░рнН рмХрм░рм┐рммрм╛ рм╕рм░рм│ рмХрм░рм┐рмерм╛рмП, рмпрнЗрмХрнМрмгрм╕рм┐ рмлрм░рнНрморм╛рмЯрнН рммрнНрнЯрммрм╣рм╛рм░ рмХрм░рм┐ рмпрм╛рм╣рм╛ рмЖрмкрмгрмЩрнНрмХ рмкрм╛рмЗрмБ рм╕рнБрммрм┐рмзрм╛рмЬрмирмХред",
        tryNowTitle: "рммрм░рнНрмдрнНрмдрморм╛рми рмЕрм░рнЛрмЧрнНрнЯрм▓рм┐рмЩрнНрмХрнН рмЪрнЗрм╖рнНрмЯрм╛ рмХрм░рмирнНрмдрнБ",
        tryNowSubtitle: "рмЖрмкрмгрмЩрнНрмХрм░ рм╕рнНрн▒рм╛рм╕рнНрмернНрнЯ рмЪрм┐рмирнНрмдрм╛рмЧрнБрмбрм┐рмХрнБ рм╕рнЗрм╣рм┐ рмкрмжрнНрмзрмдрм┐рм░рнЗ рм╕рнЗрнЯрм╛рм░рнН рмХрм░рмирнНрмдрнБ рмпрм╛рм╣рм╛ рмЖрмкрмгрмЩрнНрмХ рмкрм╛рмЗрмБ рм╕рммрнБрмарм╛рм░рнЗ рмнрм▓ рмХрм╛рмо рмХрм░рм┐рмерм╛рмП",
        textTab: "рмПрмарм╛рм░рнЗ рмЖрмкрмгрмЩрнНрмХрм░ рм╕рморм╕рнНрнЯрм╛ рмЯрм╛рмЗрмкрнН рмХрм░рмирнНрмдрнБ",
        uploadImage: "рмЫрммрм┐ рмЕрмкрм▓рнЛрмбрнН рмХрм░рмирнНрмдрнБ",
        startWebcam: "рн▒рнЗрммрмХрнНрнЯрм╛рморнН рмЖрм░рморнНрмн рмХрм░рмирнНрмдрнБ",
        stopWebcam: "рн▒рнЗрммрмХрнНрнЯрм╛рморнН рммрмирнНрмж рмХрм░рмирнНрмдрнБ",
        whyUsTitle: "рм╕рнНрн▒рм╛рм╕рнНрмернНрнЯ рмПрмХ рм╕рм╛рмЭрнЗрмжрм╛рм░рнАред рмЖрморнЗ рм╕рм╛рм╣рм╛рмпрнНрнЯ рмкрм╛рмЗрмБ рмПрмарм╛рм░рнЗ рмЕрмЫрнБред",
        contactTitle: "рм╕рморнНрмкрм░рнНрмХрм░рнЗ рм░рм╣рмирнНрмдрнБ",
        contactSubtitle: "рм╕рморм╕рнНрмд рмЕ-рмЪрм┐рмХрм┐рмдрнНрм╕рм╛ рмкрнНрм░рм╢рнНрмирмЧрнБрмбрм┐рмХ рмкрм╛рмЗрмБ, рмжрнЯрм╛рмХрм░рм┐ рмирм┐рморнНрмирм▓рм┐рмЦрм┐рмд рмлрм░рнНрмормЯрм┐ рмкрнВрм░рмг рмХрм░рмирнНрмдрнБред",
        footerText: "┬й 2024 рмЕрм░рнЛрмЧрнНрнЯрм▓рм┐рмЩрнНрмХрнНред рм╕рморм╕рнНрмд рмЕрмзрм┐рмХрм╛рм░ рм╕рнБрм░рмХрнНрм╖рм┐рмдред",
        privacyPolicy: "рмЧрнЛрмкрмирнАрнЯрмдрм╛ рмирнАрмдрм┐",
        termsOfService: "рм╕рнЗрммрм╛рм░ рм╕рм░рнНрмдрнНрмдрм╛рммрм│рнА",
        getStarted: "рмЖрм░рморнНрмн рмХрм░рмирнНрмдрнБ"
    }
};

function toggleLanguageDropdown() {
    const dropdown = document.getElementById('languageDropdown');
    
    if (!dropdown) {
        console.warn('Language dropdown element not found');
        return;
    }
    
    isLanguageDropdownOpen = !isLanguageDropdownOpen;
    
    if (isLanguageDropdownOpen) {
        dropdown.classList.add('show');
    } else {
        dropdown.classList.remove('show');
    }
}

function changeLanguage(langCode) {
    if (!translations[langCode]) {
        console.error('Invalid language code:', langCode);
        return;
    }
    
    currentLanguage = langCode;
    const currentLangElement = document.getElementById('currentLanguage');
    
    // Update language display
    if (currentLangElement) {
        currentLangElement.textContent = translations[langCode].name;
    }
    
    // Update active language option
    document.querySelectorAll('.language-option').forEach(option => {
        option.classList.remove('active');
    });
    
    const activeOption = document.querySelector(`[data-lang="${langCode}"]`);
    if (activeOption) {
        activeOption.classList.add('active');
    }
    
    // Close dropdown
    if (isLanguageDropdownOpen) {
        toggleLanguageDropdown();
    }
    
    // Update UI elements
    updateLanguageContent(langCode);
    
    // Save language preference
    localStorage.setItem('preferredLanguage', langCode);
    
    // Update greeting message
    updateGreetingMessage(langCode);
    
    console.log('Language changed to:', translations[langCode].name);
}

function updateLanguageContent(langCode) {
    const lang = translations[langCode];
    
    if (!lang) {
        console.error('Language not found:', langCode);
        return;
    }
    
    // Update hero section
    const heroTitle = document.querySelector('#hero h1');
    if (heroTitle) heroTitle.textContent = lang.heroTitle;
    
    const heroSubtitle = document.querySelector('#hero p');
    if (heroSubtitle) heroSubtitle.textContent = lang.heroSubtitle;
    
    const heroCTA = document.querySelector('#hero a');
    if (heroCTA) heroCTA.textContent = lang.heroCTA;
    
    // Update how it works section
    const howItWorksTitle = document.querySelector('#how-it-works h2');
    if (howItWorksTitle) howItWorksTitle.textContent = lang.howItWorksTitle;
    
    const howItWorksSubtitle = document.querySelector('#how-it-works p');
    if (howItWorksSubtitle) howItWorksSubtitle.textContent = lang.howItWorksSubtitle;
    
    // Update try now section
    const tryNowTitle = document.querySelector('#chat h2');
    if (tryNowTitle) tryNowTitle.textContent = lang.tryNowTitle;
    
    const tryNowSubtitle = document.querySelector('#chat .text-center p');
    if (tryNowSubtitle) tryNowSubtitle.textContent = lang.tryNowSubtitle;
    
    // Update tab labels
    const textTab = document.querySelector('[onclick="switchTab(\'type\')"]');
    if (textTab) textTab.innerHTML = `<span class="material-symbols-outlined tab-icon">edit</span> ${lang.textTab}`;
    
    // Update why us section
    const whyUsTitle = document.querySelector('#why-us h2');
    if (whyUsTitle) whyUsTitle.textContent = lang.whyUsTitle;
    
    // Update contact section
    const contactTitle = document.querySelector('#contact h2');
    if (contactTitle) contactTitle.textContent = lang.contactTitle;
    
    const contactSubtitle = document.querySelector('#contact p');
    if (contactSubtitle) contactSubtitle.textContent = lang.contactSubtitle;
    
    // Update footer
    const footerText = document.querySelector('footer p');
    if (footerText) footerText.textContent = lang.footerText;
    
    const privacyPolicy = document.querySelector('footer a:first-child');
    if (privacyPolicy) privacyPolicy.textContent = lang.privacyPolicy;
    
    const termsOfService = document.querySelector('footer a:last-child');
    if (termsOfService) termsOfService.textContent = lang.termsOfService;
    
    // Update floating CTA
    const floatingCTA = document.querySelector('#floatingCTA span:last-child');
    if (floatingCTA) floatingCTA.textContent = lang.getStarted;
    
    // Update text input placeholder
    const messageInput = document.getElementById('messageInput');
    if (messageInput) {
        messageInput.placeholder = lang.placeholder;
    }
    
    // Update button texts
    const sendButton = document.querySelector('button[onclick="sendTextMessage()"] .material-symbols-outlined');
    if (sendButton && lang.buttons.send) {
        sendButton.setAttribute('title', lang.buttons.send);
    }
    
    const recordButton = document.getElementById('recordButton');
    if (recordButton && lang.buttons.record) {
        recordButton.textContent = lang.buttons.record;
    }
}

function updateGreetingMessage(langCode) {
    const chatContainer = document.getElementById('chatContainer');
    if (!chatContainer) return;
    
    const existingGreeting = chatContainer.querySelector('.message.ai .message-bubble');
    
    if (existingGreeting && translations[langCode]) {
        existingGreeting.innerHTML = formatMessageContent(translations[langCode].greeting);
        
        // Add a subtle animation to indicate language change
        existingGreeting.style.transform = 'scale(0.95)';
        existingGreeting.style.opacity = '0.8';
        
        setTimeout(() => {
            existingGreeting.style.transform = 'scale(1)';
            existingGreeting.style.opacity = '1';
        }, 200);
    }
}

function formatMessageContent(content) {
    // Convert newlines to HTML breaks
    return content.replace(/\n/g, '<br>');
}

function initializeLanguage() {
    // Load saved language preference
    const savedLanguage = localStorage.getItem('preferredLanguage') || 'en';
    
    if (savedLanguage !== 'en') {
        changeLanguage(savedLanguage);
    }
    
    // Set up event listeners
    setupLanguageEventListeners();
}

function setupLanguageEventListeners() {
    // Close dropdown when clicking outside
    document.addEventListener('click', function(event) {
        const languageSwitcher = event.target.closest('.language-switcher');
        
        if (!languageSwitcher && isLanguageDropdownOpen) {
            toggleLanguageDropdown();
        }
    });
    
    // Prevent dropdown from closing when clicking inside
    const dropdown = document.getElementById('languageDropdown');
    if (dropdown) {
        dropdown.addEventListener('click', function(event) {
            event.stopPropagation();
        });
    }
}

// Initialize on DOM load
document.addEventListener('DOMContentLoaded', function() {
    console.log('Initializing language system...');
    initializeLanguage();
});

// Export functions for global access
window.toggleLanguageDropdown = toggleLanguageDropdown;
window.changeLanguage = changeLanguage;
window.currentLanguage = () => currentLanguage;